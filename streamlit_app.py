import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Configuration Google Sheets
def connection_google_sheets(json_keyfile, sheet_name):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    credentials = ServiceAccountCredentials.from_json_keyfile_name(json_keyfile, scope)
    client = gspread.authorize(credentials)
    sheet = client.open(sheet_name).sheet1
    return sheet

def sauvegarder_donnees_google(sheet, data):
    sheet.append_row(data)

# Connexion √† la Google Sheet
try:
    sheet = connection_google_sheets('credentials.json', 'Donnees_Patients')
except Exception as e:
    sheet = None
    st.error(f"Erreur de connexion √† Google Sheets : {e}")

st.title('Besoin nutritionnel du patient üçè')

# Fonctions utilitaires
def IMC(masse_actuelle, taille):
    return round(masse_actuelle / taille**2, 1)

def perte_de_masse(masse_avant, masse_actuelle):
    return round(((masse_avant - masse_actuelle) / masse_avant) * 100, 1)

# Formulaire de saisie
with st.form('Donn√©es'):
    masse_actuelle = st.number_input('Quel est le poids actuel du patient en kg ?')
    masse_avant = st.number_input('Quel √©tait le poids √† la derni√®re pes√©e du patient en kg ?')
    temps = st.number_input('Quelle dur√©e s√©pare les deux pes√©es en mois ?', min_value=0)
    taille = st.number_input('Quelle est la taille du patient en m ?', min_value=0.5, max_value=2.5)
    eg = st.radio('Quel est l‚Äô√©tat g√©n√©ral du patient ?', options=['Bon', 'Mauvais'], index=0)
    age = st.number_input('Quel √¢ge a le patient ?', min_value=0)
    ingesta = st.slider('Quels sont les ingestas du patient (100% = rien ne change d‚Äôhabitude) ?', min_value=0, max_value=100, value=100)
    stress_metabolique = st.selectbox(
        'Quels facteurs de stress m√©taboliques affectent le patient ?',
        ('patient faible mais non allit√© ou maladie chronique avec complication', 'maladie active ou patient allit√©', 'patient de soins intensifs ou ventilation assist√©e')
    )
    alcool = st.radio('Le patient a-t-il des ant√©c√©dents avec l‚Äôalcool ?', options=['Oui', 'Non'])
    hypo = st.radio('Le patient souffre-t-il d‚Äôhypophosphat√©mie, hypokali√©mie ou hypomagn√©s√©mie ?', options=['Oui', 'Non'])
    type_patient = st.selectbox(
        'Le patient est ...',
        ('hospitalis√©', 'en oncologie m√©dicale', '√¢g√© d√©nutris', 'en neurologie type SLA', 'en p√©ri-op√©ratoire', 'en r√©animation phase aigu√´', 'r√©animation phase anabolique')
    )
    submitted = st.form_submit_button('Soumettre')

if submitted:
    # Calculs de base
    imc = IMC(masse_actuelle, taille)
    perte = perte_de_masse(masse_avant, masse_actuelle)

    # √âvaluation du poids ajust√© pour les besoins caloriques
    if imc >= 30:
        PCI = 25 * (taille ** 2)
        PA = PCI + 0.25 * (masse_actuelle - PCI)
        poids_calcul = PA
    else:
        poids_calcul = masse_actuelle

    # D√©tection du risque de SRI
    def sri(imc, perte, temps, ingesta, hypo, alcool):
        criteres_majeurs = (
            imc < 16,
            perte >= 15 and temps <= 6,
            ingesta < 10 and temps <= 0.33,
            hypo == 'Oui'
        )
        criteres_mineurs = [
            16 <= imc < 18.5,
            perte >= 10 and 3 <= temps <= 6,
            ingesta == 0 and temps <= 0.17,
            alcool == 'Oui'
        ]
        risque_crit_majeur = any(criteres_majeurs)
        nb_criteres_mineurs = sum(criteres_mineurs)
        if risque_crit_majeur:
            return "Risque √©lev√© (Crit√®re majeur d√©tect√©)"
        elif nb_criteres_mineurs >= 2:
            return "Risque √©lev√© (‚â• 2 crit√®res mineurs d√©tect√©s)"
        else:
            return 'Pas de risque de SRI'

    risque_sri = sri(imc, perte, temps, ingesta, hypo, alcool)

    # D√©finition des besoins nutritionnels
    besoins = {
        'hospitalis√©': (20, 35),
        'en oncologie m√©dicale': (30, 35),
        '√¢g√© d√©nutris': (30, 40),
        'en neurologie type SLA': (35, 35),
        'en p√©ri-op√©ratoire': (25, 30),
        'en r√©animation phase aigu√´': (20, 25),
        'r√©animation phase anabolique': (25, 30)
    }
    besoins_proteines = {
        'hospitalis√©': (1.0, 2.0),
        'en oncologie m√©dicale': (1.2, 1.5),
        '√¢g√© d√©nutris': (1.2, 1.5),
        'en neurologie type SLA': (1.2, 1.5),
        'en p√©ri-op√©ratoire': (1.2, 1.5),
        'en r√©animation phase aigu√´': (1.2, 1.5),
        'r√©animation phase anabolique': (2.0, 2.0) if imc >= 30 else (1.2, 1.5)
    }

    # Calcul des besoins
    bgk, bdk = besoins.get(type_patient, (20, 25))
    kcal_min = poids_calcul * bgk
    kcal_max = poids_calcul * bdk

    bgp, bdp = besoins_proteines.get(type_patient, (1.2, 1.5))
    prot_min = poids_calcul * bgp
    prot_max = poids_calcul * bdp

    # Affichage des r√©sultats
    st.write(f"IMC du patient : **{imc}**")
    st.write(f"Perte de poids : **{perte}%**")
    st.write(f"Les besoins caloriques sont de **{round(kcal_min, 1)} kcal/j** √† **{round(kcal_max, 1)} kcal/j**.")
    st.write(f"Les besoins en prot√©ines sont de **{round(prot_min, 1)} g/j** √† **{round(prot_max, 1)} g/j**.")
    st.write(f"Risque de syndrome de renutrition inappropri√©e (SRI) : **{risque_sri}**")

    # Sauvegarde dans Google Sheets
    if sheet:
        try:
            sauvegarder_donnees_google(sheet, [
                masse_actuelle, masse_avant, temps, taille, eg, age, ingesta, stress_metabolique, alcool, hypo,
                type_patient, imc, perte, round(kcal_min, 1), round(kcal_max, 1), round(prot_min, 1), round(prot_max, 1)
            ])
            st.success("Donn√©es sauvegard√©es avec succ√®s dans Google Sheets !")
        except Exception as e:
            st.error(f"Erreur lors de la sauvegarde des donn√©es : {e}")

